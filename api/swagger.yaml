swagger: '2.0'

# This is your document metadata
info:
  version: "1.0.0"
  title: Issue Tracker ASW
host: arcane-falls-72768.herokuapp.com

securityDefinitions:
   # X-User-Token Aleix: itZhA1GN8j_szrA7BG7_
   APIKeyHeader:
     type: apiKey
     in: header
     name: X-User-Token

security:
  - APIKeyHeader: []

# Describe your paths here
paths:
  
  /issues:
    get:
      tags:
        - Issues
      description:
        Gets `Issue` objects.
      produces:
        - "application/json"
      # This is array of GET operation parameters:
      parameters:
      - in: "query"
        name: "type"
        description: "Gets `Issue` objects by type"
        required: false
        type: "string"
        enum:
        - "Bug"
        - "Enhancement"
        - "Proposal"
        - "Task"
      - in: "query"
        name: "priority"
        description: "Gets `Issue` objects by priority"
        required: false
        type: "string"
        enum:
        - "Trivial"
        - "Minor"
        - "Major"
        - "Critical"
        - "Blocker"
      - in: "query"
        name: "status"
        description: "Gets `Issue` objects by status"
        required: false
        type: "string"
        enum:
        - "New"
        - "Open"
        - "On hold"
        - "Resolved"
        - "Duplicate"
        - "Invalid"
        - "Won't fix"
        - "Closed"
        - "New&Open"
      - in: "query"
        name: "assignee"
        description: "Gets `Issue` objects by assignee"
        required: false
        type: "integer"
      - in: "query"
        name: "watcher"
        description: "Gets `Issue` objects watched by a user"
        required: false
        type: "integer"
        
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            title: ArrayOfIssues
            type: array
            items:
              $ref: "#/definitions/Issue"
        401:
           $ref: "#/responses/UnauthorizedError"
  
  '/issues/{issue_id}':
    delete:
      tags:
        - Issues
      description: Delete a `Issue` object
      produces: 
        - application/json
      parameters: 
        - in: path
          name: issue_id
          description: ID of an Issue
          required: true
          type: integer
      responses:
        200:
          description: Success
          schema:
            type: object
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        403:
          description: You can't delete an Issue created by other users
          
  '/issues/{issue_id}/edit':
    put:
      tags:
        - Issues
      description: Update an `Issue` object
      consumes: 
        - application/x-www-form-urlencoded
      produces: 
        - application/json
      parameters: 
        - in: path
          name: issue_id
          description: ID of an Issue
          required: true
          type: integer
        - in: formData
          name: title
          type: string
          description: Title of the issue
        - in: formData
          name: status
          type: string
          description: Status of the issue
        - in: formData
          name: priority
          type: string
          description: Priority of the issue
        - in: formData
          name: type
          type: string
          description: Type of the issue
        - in: formData
          name: assignee
          type: string
          description: Assignee of the issue
      responses:
        200:
          description: Success
          schema:
            type: object
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
          
  /issues/new:
    post:
      tags: 
        - Issues
      description: Creates a new `Issue` Object
      consumes: 
        - application/x-www-form-urlencoded
      parameters: 
        - in: formData
          name: title
          type: string
          description: Title of the issue
        - in: formData
          name: status
          type: string
          description: Status of the issue
        - in: formData
          name: priority
          type: string
          description: Priority of the issue
        - in: formData
          name: type
          type: string
          description: Type of the issue
        - in: formData
          name: assignee
          type: string
          description: Assignee of the issue
            
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Issue'
        401:
          $ref: "#/responses/UnauthorizedError"

  /issues/{issue_id}/comments:
    get:
      tags:
        - Comments
      description: Gets `Comment` objects from Issue
      produces:
        - application/json
      parameters:
        - in: path
          name: issue_id
          description: ID of an Issue
          required: true
          type: integer
      responses:
        200:
          description: Successful response
          schema:
            title: ArrayOfComments
            type: array
            items:
              $ref: '#/definitions/Comment'
        401:
           $ref: "#/responses/UnauthorizedError"
    
    post:
      tags: 
        - Comments
      description: Creates a new `Comment` for a Issue
      consumes: 
        - application/x-www-form-urlencoded
      parameters: 
        - in: path
          name: issue_id
          description: ID of an Issue
          required: true
          type: integer
        - in: formData
          name: body
          type: string
          description: Text of the comment
            
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Comment'
        401:
          $ref: "#/responses/UnauthorizedError"
    
  
  /issues/{issue_id}/comments/{comment_id}:
    get:
      tags:
        - Comments
      description: Get a `Comment` object from Issue
      produces: 
        - application/json
      parameters: 
        - in: path
          name: issue_id
          description: ID of an Issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: ID of a Comment
          required: true
          type: integer
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Comment'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
          
    put:
      tags:
        - Comments
      description: Update a `Comment` object
      consumes: 
        - application/x-www-form-urlencoded
      produces: 
        - application/json
      parameters: 
        - in: path
          name: issue_id
          description: ID of an Issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: ID of a Comment
          required: true
          type: integer
        - in: formData
          name: body
          type: string
          description: Text of the Comment
      responses:
        200:
          description: Success
          schema:
            type: object
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        403:
          description: You can't edit a Comment created by other users
          
    delete:
      tags:
        - Comments
      description: Delete a `Comment` object
      produces: 
        - application/json
      parameters: 
        - in: path
          name: issue_id
          description: ID of an Issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: ID of a Comment
          required: true
          type: integer
      responses:
        200:
          description: Success
          schema:
            type: object
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFound'
        403:
          description: You can't delete a Comment created by other users
          
  /issues/{issue_id}/comments/{comment_id}/attachment:
    get:
      tags: 
        - Attachments
      description: Get a an Attachment from a Comment
      produces: 
        - application/json
      parameters: 
        - in: path
          name: issue_id
          description: ID of an Issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: ID of a Comment
          required: true
          type: integer
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Attachment'
        404:
          description: This comment has no attachments
        401:
          $ref: '#/responses/UnauthorizedError'
    post:
      tags:
        - Attachments
      description: Attach an image to a Comment
      produces:
        - application/json
      consumes: 
        - application/x-www-form-urlencoded
      parameters: 
        - in: path
          name: issue_id
          description: ID of an Issue
          required: true
          type: integer
        - in: path
          name: comment_id
          description: ID of a Comment
          required: true
          type: integer
        - in: formData
          name: file
          description: Image file encoded in base64
          type: string
          format: base64
          required: true
        - in: formData
          name: filename
          type: string
          description: Original filename of the image
          required: false
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Attachment'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          description: You can't attach an image to a comment of other users
            
  
responses:
  UnauthorizedError:
    description: API key is missing or invalid
    headers:
      WWW_Authenticate:
        type: string
  NotFound:
    description: Resource not found
  
definitions:
  Issue:
    type: "object"
    properties:
      id:
        type: "integer"
        example: "1"
      Title:
        type: "string"
        example: "Issue 1"
      Description:
        type: "string"
        example: "description"
      Type:
        type: "string"
        example: "Bug"
      Priority:
        type: "string"
        example: "Critical"
      Status:
        type: "string"
        example: "New"
      user_id:
        type: "integer"
        example: "1"
      created_at:
        type: "string"
        format: "date"
        example: "2017-05-07T18:28:01.933Z"
      updated_at:
        type: "string"
        format: "date"
        example: "2017-05-07T18:28:02.933Z"
      Votes:
        type: "integer"
        example: 1
      assignee_id:
        type: "integer"
        example: "1"
      Watchers:
        type: "integer"
        example: "1"
      attachment_file_name:
        type: "string"
        example: "attachment.png"
      attachment_content_type:
        type: "string"
        example: "image/png"
      attachment_file_size:
        type: "integer"
        example: "100"
      attachment_updated_at:
        type: "string"
        format: "date"
        example: "2017-05-07T18:28:02.933Z"
  
  Comment:
    type: object
    properties:
      body:
        type: string
        example: This is an example comment
      issue_id:
        type: integer
        example: 10
      user_id:
        type: integer
        example: 67
      created_at:
        type: string
        format: date
        example: '2017-11-25T12:18:04.876Z'
      updated_at:
        type: string
        format: date
        example: '2017-11-25T12:18:04.876Z'
      attachment_id:
        type: integer
        example: 45
        
  Attachment:
    type: object
    properties:
      attachment_content_type:
        type: string
        example: image/jpeg
      attachment_file_name:
        type: string
        example: image.jpg
      attachment_file_size:
        type: integer
        example: 2673366
      attachment_updated_at:
        type: string
        format: date
        example: "2017-12-04T10:22:10.641Z"
      url:
        type: string
        example: http://example.com/image.jpg
      _links:
        type: object
        properties:
          comment:
            type: object
            properties:
              href:
                type: string
                example: /issues/1/comments/21
          self:
            type: object
            properties:
              href:
                type: string
                example: /issues/1/comments/21/attachment
          creator:
            type: object
            properties:
              href:
                type: string
                example: /users/1
